rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read/write their own document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && request.auth.uid != null;
      
      // User devices subcollection
      match /devices/{deviceId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // User settings collection
    match /userSettings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User stats collection
    match /userStats/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Bank details collection
    match /bankDetails/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Exams collection - read access for authenticated users
    match /exams/{examId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Categories collection - read access for authenticated users
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Questions collection - read access for authenticated users
    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Subjects collection - read access for authenticated users
    match /subjects/{subjectId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Exam attempts - users can read/write their own attempts
    match /examAttempts/{attemptId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read: if request.auth != null && isAdmin();
    }
    
    // Rankings - read access for authenticated users
    match /rankings/{rankingId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Results - users can read their own results
    match /results/{resultId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if request.auth != null && isAdmin();
      allow read: if request.auth != null && isAdmin();
    }
    
    // Rewards - users can read their own rewards
    match /rewards/{rewardId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if request.auth != null && isAdmin();
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Registrations - admin access only
    match /registrations/{registrationId} {
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Admin dashboard stats
    match /dashboardStats/{statId} {
      allow read: if request.auth != null && isAdmin();
      allow write: if request.auth != null && isAdmin();
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
  }
} 